#pragma once

#include <type_traits>

//http://blog.bitwigglers.org/using-enum-classes-as-type-safe-bitmasks/
enum class log_flags : int {
	none                        = 0,
	debug                       = 1 << 0,
	output_tokens               = 1 << 1,
 	output_ast                  = 1 << 2,
	output_object_model_as_code = 1 << 3,
	output_instruction_tree     = 1 << 4,
	output_prelude              = 1 << 5,
	output_typeof_information   = 1 << 6,
	output_compilation_steps    = 1 << 7,
	output_ast_to_code          = 1 << 8,
};

constexpr log_flags operator|(log_flags lhs, log_flags rhs) 
{
    return static_cast<log_flags>(
		static_cast<std::underlying_type<log_flags>::type>(lhs) | 
		static_cast<std::underlying_type<log_flags>::type>(rhs)
	);
}

constexpr log_flags operator&(log_flags lhs, log_flags rhs) 
{
    return static_cast<log_flags>(
		static_cast<std::underlying_type<log_flags>::type>(lhs) & 
		static_cast<std::underlying_type<log_flags>::type>(rhs)
	);
}

constexpr bool flag_set(const log_flags input_flags, const log_flags flags) 
{
    return static_cast<int>(input_flags & flags);
}

constexpr log_flags logging_bitmask = @ELEMENT_LOG_VERBOSITY@;

constexpr bool should_log_compilation_step()
{
    return (static_cast<int>(logging_bitmask) & static_cast<int>(log_flags::output_compilation_steps)) != 0;
}