struct Vector2(x:Num, y:Num)
{
    
}

struct Vector3(x:Num, y:Num, z:Num)
{
    add(a:Vector3, b:Vector3):Vector3 = Vector3(a.x.add(b.x), a.y.add(b.y), a.z.add(b.z))
    mul(a:Vector3, b:Vector3) = memberwise(Num.mul, a, b)
}

factorial(a:Num):Num
{
    return = for(Vector2(1, 1), condition, body).y
    condition(v:Vector2):Bool = v.x.leq(a)
    body(v:Vector2):Vector2 = Vector2(v.x.add(1), v.y.mul(v.x))
}

returnVec2(a:Vector2):Num = a.x

factorialExpressionBodied(a:Num):Num = for({i = a, v = 1},
                                     _(tup):Bool = tup.i.gt(0),
                                     _(tup) = {i = tup.i.sub(1), v = tup.v.mul(tup.i)})
                                 .v

struct MyStruct(vector:Vector3)
makeMyStruct(a:Num) = MyStruct(Vector3(a, a, a))
predicate(a:MyStruct):Bool = false
iterateWithMyStruct(a:Num):Num = for(makeMyStruct(a), predicate, _(a:MyStruct):MyStruct = a).vector.add(Vector3(2, 2, 2)).x

struct LoopState(value:Num)
NestedForLoop(a:Num):Num
{
   nested_predicate(input:Num):Bool = input.lt(20)
   nested_body(input:Num):Num = input.add(1)
   body(input:LoopState):LoopState = LoopState(input.value.add(for(a, nested_predicate, nested_body)))
   predicate(input:LoopState):Bool = input.value.lt(200)
   return = for(LoopState(a), predicate, body).value
}

resolveDifferentReturnTypes(a:Num)
{
    return:List 
    {
        index(idx:Num) = Bool.if(a.gt(0), Num.floor(a), 0)
        return = List(index, 1)
    }
    
    #return = Bool.if(a.gt(0), Num.floor(a), Num.floor(0))
}