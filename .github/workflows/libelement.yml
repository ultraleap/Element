name: libelement

on: [push]

jobs:
  run-libelement-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Run tests
        run: |
          export CC=gcc-9
          export CXX=g++-9
          cd libelement
          mkdir build
          cd build
          cmake -DBUILD_TESTING=ON ..
          cmake --build .
          make test
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@1.0.0
        with:
          name: libelement Test App Results
          path: libelement/build/libemelement_test_app_details.xml

  run-laboratory-tests-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Run tests
        run: |
          cd Laboratory
          export CC=gcc-9
          export CXX=g++-9
          dotnet test --test-adapter-path:. --logger:trx -s "libelement_cli_unix_ci_debug.runsettings"
      - name: Uploaded test results on fail
        if: failure()
        uses: actions/upload-artifact@v1.0.0
        with:
          name: libelement Laboratory Results
          path: Laboratory/TestResults

  run-laboratory-tests-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Run tests
        run: |
          cd Laboratory
          dotnet test --test-adapter-path:. --logger:trx -s "libelement_cli_unix_ci_debug.runsettings"
      - name: Uploaded test results on fail
        if: failure()
        uses: actions/upload-artifact@v1.0.0
        with:
          name: libelement Laboratory Results
          path: Laboratory/TestResults

  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Install dependencies
        run: |
          #download lcov, used for outputting basic summary (and may be used in the future)
          mkdir lcov
          wget -c https://github.com/linux-test-project/lcov/releases/download/v1.14/lcov-1.14.tar.gz -O - | tar -xz -C lcov/
          cd lcov/lcov-1.14
          sudo make install
          cd ../..

          #install gcovr, used to generate the sonarqube coverage
          pip install gcovr
          python -m gcovr -v

          #download sonarqube code scanner
          mkdir codescanner
          cd codescanner
          sudo wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
          sudo unzip sonar-scanner-cli-4.4.0.2170-linux.zip
          sudo rm sonar-scanner-cli-4.4.0.2170-linux.zip
          sudo chmod +x sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner
          cd ..
      - name: Run tests with code coverage
        env:
          SONARQUBE_URL: ${{ secrets.SONARQUBE_URL }}
          SONARQUBE_LIBELEMENT: ${{ secrets.SONARQUBE_LIBELEMENT }}
        run: |
          #specify compiler version for cmake
          export CC=gcc-8
          export CXX=g++-8

          #specify gcov version to match compiler version
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-8 90
          sudo ln -sf /usr/bin/gcov-8 /usr/bin/gcov

          # ---- libelement Test App Coverage ----
          cd libelement
          mkdir build
          cd build
          cmake -DELEMENT_BUILD_TESTING=ON -DELEMENT_CODE_COVERAGE=ON ..
          set +e
          cmake --build . --target element_test_coverage
          set -e
          cd ../..

          # ----- Laboratory Tests Coverage ------
          cd Laboratory

          #run laboratory tests, without failing the build on error
          set +e
          dotnet test -v q --test-adapter-path:. --logger:trx -s "libelement_cli_unix_ci_debug_codecoverage.runsettings"
          set -e

          cd ../libelement.CLI/build
          
          #run lcov, gathering coverage info and outputting a basic summary
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
          lcov --list coverage.info

          # ----- Sonarqube coverage generation ------
          #run gcvor using python as it's not in PATH. root is the entire element repo. exclude using regex, libraries and paths that don't matter.
          #note: we have to exclude c files as sonarqube doesn't like them
          #we output the coverage file at the root of the repository
          python -m gcovr -r "../../" -e ".*dependencies\/.*" -e ".*_deps\/.*" -e ".*build\/.*" -e ".*\.c$" --sonarqube ../../coverage.xml -s

          cd ../..

          #run the code scanner
          #sources include libelement and libelement.CLI (the CLI is what we run to generate the coverage, useful to see coverage for it as well)
          #the entire repo is the project. all of these path settings are required for sonarqube and gcovr to understand the same relative paths
          #if paths break, look at contents of coverage file for the paths used
          #exclude looking at dependencies and other unrelated things, sonarqubes custom wildcard formatting
          ./codescanner/sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner \
            -Dsonar.login=$SONARQUBE_LIBELEMENT \
            -Dsonar.host.url=$SONARQUBE_URL \
            -Dsonar.projectKey=libelement \
            -Dsonar.sources=libelement,libelement.CLI \
            -Dsonar.projectName="libelement" \
            -Dsonar.coverageReportPaths="coverage.xml" \
            -Dsonar.projectBaseDir="." \
            -Dsonar.exclusions=**/dependencies/**/*,**/_deps/**/*,**/build/**/* \
            -Dsonar.coverage.exclusions=**/dependencies/**/*,**/_deps/**/*,**/build/**/*

  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install clang-format-9
      - name: Run analysis
        run: |
          export CC=gcc-9
          export CXX=g++-9
          cd libelement
          mkdir build
          cd build
          cmake ..
          # Run clang-format to see if code matches our style guide, clang-format target can be used to apply changes
          cmake --build . --target element_clang_check
