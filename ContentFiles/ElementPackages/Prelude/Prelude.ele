#[[ Anything at all! ]]
intrinsic constraint Any

# Arity-based function constraints
constraint Unary(a)
constraint Binary(a, b)
constraint Ternary(a, b, c)

constraint Indexer(i:Num)
constraint Predicate(a):Bool


#[[ Call body repeatedly until condition is not met
#   WARNING: Usage of this function breaks halting guarantees
#   Body is a Unary function supplied with the output from the previous body starting with initial
#   Thus the types of initial and both the parameter and return of Unary must have compatible interfaces
#   List.fold is recommended as a constant-time alternative when iteration count is known
#]]
intrinsic function for(initial, condition:Predicate, body:Unary)


namespace Loop
{    
    struct IterationState(state, index:Num)
    constraint IterationFunction(state:IterationState)
    
    count(initial, count:Num, body:IterationFunction)
    {
        return = for(IterationState(initial, 0),
                     _(s):Bool = s.index.lt(count),
                     _(s) = IterationState(body(s), s.index.add(1))
                     ).state
    }
}
