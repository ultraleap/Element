struct Vector2(x:Num, y:Num)
{
    zero = Vector2(0, 0)
    one = Vector2(1, 1)

    right = Vector2(1, 0)
    left = Vector2(-1, 0)
    up = Vector2(0, 1)
    down = Vector2(0, -1)

    #vector properties
    magnitudeSquared(v:Vector2):Num = v.dot(v)
    magnitude(v:Vector2):Num = Num.sqrt(v.magnitudeSquared)

    #operations
    negate(v:Vector2):Vector2 = v.scale(-1)
    
    normalise(v:Vector2):Vector2
    {
       #return zero vector if len = 0
       len = magnitude(v)
       return = v.scale(1.div(len))
    }

    #scalar operations
    scale(v:Vector2, k:Num):Vector2 = Vector2(v.x.mul(k), v.y.mul(k))
    
    #vector operations
    add(a:Vector2, b:Vector2):Vector2 = Vector2(a.x.add(b.x), a.y.add(b.y))
    sub(a:Vector2, b:Vector2):Vector2 = a.add(b.negate)
    
    dot(a:Vector2, b:Vector2):Num
    {
        s = Vector2(a.x.mul(b.x), a.y.mul(b.y))
        return = s.x.add(s.y)
    }

    #[[ Return the distance from a to b ]]
    distance(a:Vector2, b:Vector2):Num 
    {
        diff = a.sub(b)
        return = diff.magnitude
    }

    #[[ Return the unsigned angle between a and b in radians ]]
    angle(a:Vector2, b:Vector2):Num 
    {
        dot = a.dot(b)
        mag = a.magnitude.mul(b.magnitude)
        clamped = dot.div(mag).clamp(-1, 1)
        return = Num.acos(clamped)
    }

    #[[ Return the angle between "from" and "to".
    #   The output is between -pi and pi
    #   Positive means the angle is clockwise
    #]]
    signedAngle(from:Vector2, to:Vector2):Num
    {
        a = from
        b = to

        bx_ay = b.x.mul(a.y)
        by_ax = b.y.mul(a.x)

        b_cross_a = bx_ay.sub(by_ax)
        angleSign = b_cross_a.sign
        return = angleSign.mul(Vector2.angle(a, b))
    }

    #[[ Reflect "v" in the direction "n" ]]
    reflect(v:Vector2, n:Vector2):Vector2
    {
        dot = n.dot(v)
        s = 2.mul(dot)
        t = n.scale(s)
        return = v.sub(t)
    }

    lerp(t:Num, a:Vector2, b:Vector2):Vector2
    {
        return = Vector2(t.lerp(a.x, b.x), t.lerp(a.y, b.y))
    }
}

struct Vector3(x:Num, y:Num, z:Num)
{
    zero = Vector3(0, 0, 0)
    one = Vector3(1, 1, 1)
    
    right = Vector3(1, 0, 0)
    left = Vector3(-1, 0, 0)
    forward = Vector3(0, 1, 0)
    back = Vector3(0, -1, 0)
    up = Vector3(0, 0, 1)
    down = Vector3(0, 0, -1)

    #vector properties
    magnitudeSquared(v:Vector3):Num = v.dot(v)
    magnitude(v:Vector3):Num = Num.sqrt(v.magnitudeSquared)

    #operations
    negate(v:Vector3):Vector3 = v.scale(-1)

    normalise(v:Vector3):Vector3
    {
       len = magnitude(v)
       return = v.scale(1.div(len))
    }

    #scalar operations
    scale(v:Vector3, k:Num):Vector3 = Vector3(v.x.mul(k), v.y.mul(k), v.z.mul(k))

    #vector operations
    add(a:Vector3, b:Vector3):Vector3 = Vector3(a.x.add(b.x), a.y.add(b.y), a.z.add(b.z))
    sub(a:Vector3, b:Vector3):Vector3 = a.add(b.negate)

    dot(a:Vector3, b:Vector3):Num
    {
        s = Vector3(a.x.mul(b.x), a.y.mul(b.y), a.z.mul(b.z))
        return = s.x.add(s.y).add(s.z)
    }

    distance(a:Vector3, b:Vector3):Num 
    {
       diff = a.sub(b)
       return = diff.magnitude
    }

    #[[ Return the unsigned angle between a and b in radians ]]
    angle(a:Vector3, b:Vector3):Num 
    {
        dot = a.dot(b)
        mag = a.magnitude.mul(b.magnitude)
        clamped = Num.clamp(dot.div(mag), -1, 1)
        return = Num.acos(clamped) 
    }

    #[[ Return the signed angle between "from" and "to", the result is between
    #   -180 and 180 degrees.
    #   If the rotation is clockwise around the supplied axis then the result
    #   is positive. The axis does not affect the magnitude of the result.
    #]]
    signedAngle(from:Vector3, to:Vector3, axis:Vector3):Num
    {
        angleSign = to.cross(from).dot(axis).sign
        return = Vector3.angle(from, to).mul(angleSign)
    }

    #[[ Reflect "v" in the direction "n" ]]
    reflect(v:Vector3, n:Vector3):Vector3
    {
        dot = n.dot(v)
        s = 2.mul(dot)
        t = n.scale(s)
        return = v.sub(t)
    }

    lerp(t:Num, a:Vector3, b:Vector3):Vector3
    { 
        return = Vector3(t.lerp(a.x, b.x), t.lerp(a.y, b.y), t.lerp(a.z, b.z))
    }

    cross(a:Vector3, b:Vector3):Vector3
    {
        ay_bz = a.y.mul(b.z)
        az_by = a.z.mul(b.y)
        az_bx = a.z.mul(b.x)
        ax_bz = a.x.mul(b.z)
        ax_by = a.x.mul(b.y)
        ay_bx = a.y.mul(b.x)

        return = Vector3(ay_bz.sub(az_by), az_bx.sub(ax_bz), ax_by.sub(ay_bx))
    }
}

struct Vector4(x:Num, y:Num, z:Num, w:Num)
{
    zero = Vector4(0, 0, 0, 0)
    one = Vector4(1, 1, 1, 1)

    fromVector3(v:Vector3, w:Num):Vector4 = Vector4(v.x, v.y, v.z, w)
    toVector3(this:Vector4):Vector3 = Vector3(this.x, this.y, this.z)

    #vector properties
    magnitudeSquared(v:Vector4):Num = v.dot(v)
    magnitude(v:Vector4):Num = Num.sqrt(v.magnitudeSquared)

    #operations
    negate(v:Vector4):Vector4 = v.scale(-1)
    
    normalise(v:Vector4):Vector4
    {
       len = magnitude(v)
       return = v.scale(1.div(len))
    }
    
    #scalar operations
    scale(a:Vector4, b:Num):Vector4 = Vector4(a.x.mul(b), a.y.mul(b), a.z.mul(b), a.w.mul(b))
    
    #vector operations
    add(a:Vector4, b:Vector4):Vector4 = Vector4(a.x.add(b.x), a.y.add(b.y), a.z.add(b.z), a.w.add(b.w))
    sub(a:Vector4, b:Vector4):Vector4 = a.add(b.negate)
    
    dot(a:Vector4, b:Vector4):Num
    {
        s = Vector4(a.x.mul(b.x), a.y.mul(b.y), a.z.mul(b.z), a.w.mul(b.w))
        return = s.x.add(s.y).add(s.z).add(s.w)
    }

    #[[ Reflect "v" in the direction "n" ]]
    reflect(v:Vector4, n:Vector4):Vector4
    {
        dot = n.dot(v)
        s = 2.mul(dot)
        t = n.scale(s)
        return = v.sub(t)
    }

    lerp(t:Num, a:Vector4, b:Vector4):Vector4
    {
        return = Vector4(t.lerp(a.x, b.x), t.lerp(a.y, b.y), t.lerp(a.z, b.z), t.lerp(a.w, b.w))
    }
}
