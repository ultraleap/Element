struct Plane(normal:Vector3, distance:Num)
{
    fromVertices(a:Vector3, b:Vector3, c:Vector3):Plane
    {
        ba = b.sub(a)
        ca = c.sub(a)
    
        n = ba.cross(ca)
        normal = n.normalise
        d = normal.dot(a).negate
    
        return = Plane(normal, d)
    }

    intersection(a:Plane, b:Plane):Line3
    { 
        #http://geomalgorithms.com/a05-_intersect-1.html
        
        #sanity check on normals
        d1 = a.distance
        n1 = a.normal.normalise
        
        d2 = b.distance
        n2 = b.normal.normalise
        
        direction =  n1.cross(n2)

        difference = n1.scale(d2).sub(n2.scale(d1))
        point = direction.cross(difference).div(direction.magnitudeSquared)
            
        return = Line3(direction, point)
    }

    signedDistanceFromPoint(plane:Plane, point:Vector3):Num
    {
        #creates a position vector from the origin to the nearest point on the plane
        closestPointOnPlane = plane.normal.scale(plane.distance)
        #creates a position vector from point on plane to target point
        projectedPoint = point.sub(closestPointOnPlane)
        #projects position vector onto normal to determine distance from the plane
        return = projectedPoint.dot(plane.normal)
    }
}
